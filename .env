NEXT_PUBLIC_EMAILJS_SERVICE_ID=service_LTcoaching
NEXT_PUBLIC_EMAILJS_TEMPLATE_ID=template_0w2yytq
NEXT_PUBLIC_EMAILJS_PUBLIC_KEY=XSaRwpZUYQrzWinOX
NEXT_PUBLIC_RECAPTCHA_SITE_KEY=6Lf_hnwrAAAAAKXtcxXt68CzwrxBP6l8br3xPWic

# a corriger et créé un helper pour simplifier les tests

# import { render, screen, waitFor } from '@testing-library/react';
# import userEvent from '@testing-library/user-event';
# import ContactPage from '@/app/Contact/page';
# import emailjs from '@emailjs/browser';

# //  Mocks des dépendances externes (emailjs + reCAPTCHA)

# //  On remplace le composant ReCAPTCHA par un bouton factice pour simuler la validation

# jest.mock('react-google-recaptcha', () => {
#   return function DummyReCAPTCHA(props: any) {
#     return (
#       <button onClick={() => props?.ref?.current?.getValue?.('token')}>
#         Dummy reCAPTCHA
#       </button>
#     );
#   };
# });

# //  On remplace emailjs pour pouvoir le contrôler dans les tests

# jest.mock('@emailjs/browser');

# //
# jest.mock('lucide-react', () => ({
#   ChevronUp: () => <div data-testid="ChevronUp" />,
#   ChevronDown: () => <div data-testid="ChevronDown" />,
#   Check: () => <div data-testid="check-icon" />,
# }));

# //  Groupe de tests pour la page Contact

# describe('ContactPage', () => {
#   // Avant chaque test, on indique que emailjs.send() simule une réponse réussie
#   beforeEach(() => {
#     (emailjs.send as jest.Mock).mockResolvedValue({});
#   });

#   //  Test 1 : Vérifie que tous les champs sont affichés dans le formulaire

#   it('affiche les champs du formulaire', () => {
#     render(<ContactPage />);

#     // Vérifie que chaque champ est présent
#     expect(screen.getByLabelText(/Nom \*/i)).toBeInTheDocument();
#     expect(screen.getByLabelText(/Prénom \*/i)).toBeInTheDocument();
#     expect(screen.getByLabelText(/Email \*/i)).toBeInTheDocument();
#     expect(screen.getByLabelText(/Message \*/i)).toBeInTheDocument();
#   });

#   //  Test 2 : Empêche l'envoi du formulaire si le reCAPTCHA n'est pas validé

#   it("empêche l'envoi sans reCAPTCHA", async () => {
#     render(<ContactPage />);

#     // Remplit les champs
#     await userEvent.type(screen.getByPlaceholderText(/Votre nom/i), 'Jean');
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre Prénom/i),
#       'Dupont'
#     );
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre email/i),
#       'john@example.com'
#     );
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre message/i),
#       'Bonjour il faut au moins dix caractères'
#     );

#     // Clic sur le bouton Envoyer sans activer le reCAPTCHA
#     await userEvent.click(screen.getByRole('button', { name: /Envoyer/i }));

#     // Vérifie qu'un message d'erreur apparaît
#     expect(
#       await screen.findByText(/Veuillez valider le reCAPTCHA/i)
#     ).toBeInTheDocument();

#     // Vérifie que emailjs.send n'a pas été appelé
#     expect(emailjs.send).not.toHaveBeenCalled();
#   });

#   // Test 3 : Soumission correcte du formulaire avec reCAPTCHA

#   it('affiche succès après soumission correcte', async () => {
#     render(<ContactPage />);

#     // Remplit tous les champs, y compris la sélection
#     await userEvent.type(screen.getByPlaceholderText(/Votre nom/i), 'Jean');
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre Prénom/i),
#       'Dupont'
#     );

#     await userEvent.click(screen.getByRole('combobox'));

#     await userEvent.click(screen.getByText('Homme'));

#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre email/i),
#       'john@example.com'
#     );
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre message/i),
#       'Bonjour cela fonctionne'
#     );

#     // Active le faux reCAPTCHA
#     await userEvent.click(screen.getByText('Dummy reCAPTCHA'));

#     // Clic sur le bouton Envoyer
#     await userEvent.click(screen.getByRole('button', { name: /Envoyer/i }));

#     // Attend l'appel d'emailjs.send et l'affichage du message de succès
#     await waitFor(() => {
#       expect(emailjs.send).toHaveBeenCalled();
#       expect(
#         screen.getByText(/Merci ! Votre message a été envoyé/i)
#       ).toBeInTheDocument();
#     });
#   });

#   //  Test 4 : Affiche un message d'erreur si emailjs échoue

#   it('affiche une erreur si emailjs échoue', async () => {
#     // Force emailjs à échouer (simulateur d'erreur)
#     (emailjs.send as jest.Mock).mockRejectedValue(new Error('fail'));

#     render(<ContactPage />);

#     // Remplit les champs
#     await userEvent.type(screen.getByPlaceholderText(/Votre nom/i), 'Jean');
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre Prénom/i),
#       'Dupont'
#     );
    
#     await userEvent.click(screen.getByRole('combobox'));
#     await userEvent.click(screen.getByText('Femme'));await userEvent.selectOptions(screen.getByRole('combobox'), 'Femme');
    
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre email/i),
#       'john@example.com'
#     );
#     await userEvent.type(
#       screen.getByPlaceholderText(/Votre message/i),
#       'Bonjour cela fonctionne'
#     );

#     // Active le faux reCAPTCHA
#     await userEvent.click(screen.getByText('Dummy reCAPTCHA'));

#     // Clic sur Envoyer
#     await userEvent.click(screen.getByRole('button', { name: /Envoyer/i }));

#     // Attend que le message d'erreur soit visible
#     await waitFor(() => {
#       expect(screen.getByText(/Une erreur est survenue/i)).toBeInTheDocument();
#     });
#   });
# });
